rm(list=ls())

(inicio=Sys.time())

setwd("")   ### directorio con los datos


##########################
#### librerías necesarias
##########################

require(openxlsx)
require(compositions)


#############################################
#### Ponderaciones de RV, nombres de 
#### directorios y ficheros con las carteras
#### y horizontes considerados
#############################################

wRV=seq(0,1,by=0.01)
lw=length(wRV)

nomdir=paste0("RV_",format(wRV,2))
nomcar=paste0("CE_RV_",format(wRV,2),".RData")

H=1:20                  #### H = horizontes considerados
lh=length(H)


###########################################
#### Límites de rentabilidad a considerar
###########################################

dlim=read.xlsx("limites_rent.xlsx")
lim=dlim[1:7,-(1:2)]
lim=lim[,-(21:22)]
rownames(lim)=c(paste0("r_",dlim[1:6,2]),"DP")


##############################################
#### Nombres de los directorios
#### (recogen el peso de la RV en cada caso)
##############################################

nomdir=paste0("RV_",format(seq(0,1,by=0.01),2))
ld=length(nomdir)


######################################
#### Años de inicio de la inversión
######################################

aii=1999:2022              #### aii = año de inicio de la inversión
la=length(aii)


###########################
#### Activos considerados
###########################

ac=read.xlsx("01 carteras.xlsx",sheet=1)    #### ac = activos considerados. Vale cualquier hoja del fichero
nac=ncol(ac)-1                              #### nac = número de activos considerados


#########################################
#### Estudio de cada caso por separado
#########################################

for(d in 1:ld) {


	### directorio considerado (peso de RV considerado) y libro de excel a crear
		
	setwd(nomdir[d])

	nl=paste0("04 betas composicionales_",format(wRV,2)[d],".xlsx")             #### nl = nombre del libro de resultados a crear. Habrá una en cada directorio
	libro=if(!file.exists(nl)) createWorkbook() else loadWorkbook(nl)
	HL=sheets(libro)

	MB=matrix(0,lh,nac)         #### MB = matriz de betas estimadas para cada horizonte. Se hará una para cada límite y para cada directorio
	colnames(MB)=paste0("beta_",0:(nac-1))
	rownames(MB)=paste0("H_",H)

	MP=matrix(0,nrow(ac),lh)           #### MP = matriz de probabilidades estimadas para cada horizonte. Habrá una en cada directorio
	colnames(MP)=paste0("H_",H)
	rownames(MP)=ac[,1]

	for(l in 1:nrow(lim)) {

		#### Obtención de los betas según horizonte de inversión y año de inicio

		for(h in H) {

			d0=read.xlsx(paste0("04 rendimientos por horizonte para RV ",wRV[d]*100,".xlsx"),sheet=h)
			d1=d0[,-1]
			rownames(d1)=d0[,1]

			#### Para estimar las probabilidades de obtención de pérdidas:
			#### convertimos la matriz de rendimientos en matriz de pdas (1=pda, 0 = no hay pda)

			pda=matrix(0,nrow(d1),ncol(d1))
			dimnames(pda)=dimnames(d1)

			for(j in 1:ncol(pda)) pda[,j]=ifelse(d1[,j]<lim[l,h],1,0)     ### 1 si no se supera el límite establecido, 0 en caso contrario


			###################################################################################
			#### Formación de la matriz de datos y ejecución del logit con datos transformados
			###################################################################################

			ncp=apply(pda,1,function(x) sum(x>0))        ### ncp = nº casos con pérdida (que no superan el límite fijado)
			Y=cbind(ncp,ncol(pda)-ncp)
			colnames(Y)=c("ncp","resto")

			setwd("..")
			X0=read.xlsx("01 carteras.xlsx",sheet=d)
			X1=X0[,-1]
			n0=length(which(apply(X1,2,sum)==0))      #### n0 = nº variables con todos sus valores iguales a cero
			X2=if(n0==0) X1 else X1[,-which(apply(X1,2,sum)==0)]
			X=ilr(X2)

			datos=data.frame(Y,X)
			colnames(datos)=c("pda","no_pda",paste0("X",1:ncol(X)))

			if(sum(datos$pda)!=0) {
				M1=glm(cbind(pda,no_pda)~.,data=datos,family=binomial(link="logit"),maxit=50)
				MB[h,1:ncol(X2)]=coef(M1)
				MP[,h]=M1$fitted
				} else {
					MB[h,1:ncol(X2)]=0
					MP[,h]=0
					}

			setwd(nomdir[d])

			}

			##############################################
			#### Almacenamiento de resultados en MB y MP
			##############################################

			hoja=rownames(lim)[l]
			if(!(hoja %in% HL)) addWorksheet(libro,hoja)
			writeData(libro,sheet=hoja,MB,rowNames=T,colNames=T,startRow=5)

			hojap=paste0("prob_",rownames(lim)[l])
			if(!(hojap %in% HL)) addWorksheet(libro,hojap)
			writeData(libro,sheet=hojap,MP,rowNames=T,colNames=T,startRow=5)

			saveWorkbook(libro,nl,overwrite=T)

		}

		saveWorkbook(libro,nl,overwrite=T)

		setwd("..")

	}



final=Sys.time()
(duración=final-inicio)
